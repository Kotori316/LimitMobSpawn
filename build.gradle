import com.kotori316.plugin.cf.CallVersionCheckFunctionTask
import com.kotori316.plugin.cf.CallVersionFunctionTask

import java.nio.file.Files
import java.nio.file.Paths
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

plugins {
    id("signing")
    id("maven-publish")
    id("com.matthewprenger.cursegradle") version("1.4.0")
    id("net.minecraftforge.gradle") version("[6.0,6.2)")
    id("org.parchmentmc.librarian.forgegradle") version("1.+")
    id("org.spongepowered.mixin") version("0.7-SNAPSHOT")
    id("com.kotori316.plugin.cf").version("2.3")
}

version = project.modVersion
group = 'com.kotori316' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'LimitMobSpawn'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') +
        ' JVM: ' + System.getProperty('java.vm.version') +
        '(' + System.getProperty('java.vendor') + ') ' +
        'Arch: ' + System.getProperty('os.arch'))

String mcVersion() {
    String v = project.forgeVersion
    return v.split("-")[0]
}

minecraft {
    mappings channel: 'parchment', version: ((project.parchmentMapping + "-" + mcVersion()) as String)
    // mappings channel: 'official', version: mcVersion()
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property('mixin.env.remapRefMap', 'true')
            property('mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg")
            property("mixin.debug", "true")
            property 'forge.logging.console.level', 'debug'

            mods {
                "limitmobspawn" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            mods {
                "limitmobspawn" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'limit_mob_spawn_data_gen', 'true'
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'limitmobspawn', '--all', '--output', file('src/test/resources/'), '--existing', file('src/main/resources/')

            mods {
                "limitmobspawn" {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        name = "Mixin"
        url = 'https://repo.spongepowered.org/maven'
    }
    maven {
        name = "Curse"
        url = uri("https://www.cursemaven.com")
        content {
            includeGroup("curse.maven")
        }
    }
}


dependencies {
    minecraft("net.minecraftforge:forge:${project.forgeVersion}")
    // Mixin
    annotationProcessor("org.spongepowered:mixin:0.8.5:processor")
    // Test Dependencies.
    final String JUPITER_VERSION = '5.8.2'
    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: JUPITER_VERSION)
    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: JUPITER_VERSION)
    testRuntimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: JUPITER_VERSION)
    testImplementation(group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.8.2')
    // Runtime test dependencies.
    runtimeOnly(fg.deobf("curse.maven:crackers-wither-storm-mod-621405:4995110"))
}

mixin {
    add sourceSets.main, "mixins.limit-mob-spawn.refmap.json"
}

test {
    useJUnitPlatform()
    int cpus = Runtime.getRuntime().availableProcessors()
    printf("CPU: %d, Memory: %fMB%n", cpus, Runtime.getRuntime().totalMemory() / Math.pow(2, 20))
    // setMaxParallelForks(cpus > 1 ? cpus - 1 : 1)
    systemProperty('limit_mob_spawn_data_gen', 'true')
    testLogging {
        events "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
        // exceptionFormat 'full' // No need because we can get test report html.
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
def jarAttributeMap = [
        "Specification-Title"     : "limitmobspawn",
        "Specification-Vendor"    : "Kotori316",
        "Specification-Version"   : "1", // We are version 1 of ourselves
        "Implementation-Title"    : project.name,
        "Implementation-Version"  : project.version,
        "Implementation-Vendor"   : "Kotori316",
        "Implementation-Timestamp": ZonedDateTime.now().format(DateTimeFormatter.ISO_INSTANT),
        "MixinConfigs"            : "limit-mob-spawn.mixins.json",
        'Automatic-Module-Name'   : 'limitmobspawn',
]
jar {
    manifest {
        attributes(jarAttributeMap)
    }
}
task srcJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier.set('deobf')
    manifest {
        attributes(jarAttributeMap)
    }
}
artifacts {
    archives srcJar, deobfJar
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('signKeyStoreJar')

tasks.register('signKeyStoreJar') {
    dependsOn 'reobfJar'
    boolean executeCondition = project.hasProperty('jarSign.keyAlias') &&
            project.hasProperty('jarSign.keyLocation') &&
            project.hasProperty('jarSign.storePass')
    onlyIf { executeCondition }
    doLast {
        //noinspection HttpUrlsUsage
        ant.signjar(
                jar: jar.archiveFile.get(),
                alias: project.findProperty("jarSign.keyAlias"),
                keystore: project.findProperty("jarSign.keyLocation"),
                storepass: project.findProperty("jarSign.storePass"),
                sigalg: "Ed25519",
                digestalg: "SHA-256",
                tsaurl: "http://timestamp.digicert.com"
        )
    }
}

curseforge {
    final File file = file("changelog.md")
    apiKey = project.findProperty("curseforge_additional-enchanted-miner_key") ?: System.getenv("CURSE_TOKEN") ?: ""
    project {
        id = '449932'
        changelogType = 'markdown'
        changelog = file.exists() ? file.text : "See https://github.com/Kotori316/LimitMobSpawn/commits/master for change log." + System.lineSeparator() * 2 +
                "For Minecraft ${mcVersion()}, built with ${project.forgeVersion as String}"
        releaseType = 'release'
        addGameVersion mcVersion()
        addGameVersion 'Forge'
        mainArtifact jar
        addArtifact deobfJar
        addArtifact srcJar
    }
    options {
        curseGradleOptions.debug = false // defaults to false
        javaVersionAutoDetect = false
    }
}

signing {
    sign(publishing.publications)
    sign(tasks.jar, tasks.deobfJar, tasks.srcJar)
}

boolean hasGpgSignature = project.hasProperty("signing.keyId") &&
        project.hasProperty("signing.password") &&
        project.hasProperty("signing.secretKeyRingFile")

tasks.withType(Sign).configureEach {
    it.onlyIf {
        hasGpgSignature
    }
}

tasks.withType(AbstractPublishToMaven).configureEach {
    if (hasGpgSignature) {
        it.dependsOn(":signJar")
        it.dependsOn(":signSrcJar")
        it.dependsOn(":signDeobfJar")
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "LimitMobSpawn"
            artifact srcJar {
                archiveClassifier.set('sources')
                archiveExtension.set('jar')
            }
            artifact deobfJar {
                archiveClassifier.set('deobf')
                archiveExtension.set('jar')
            }
            artifact jar
            pom {
                name = archivesBaseName
                description = "LimitMobSpawn for Minecraft ${mcVersion()}, build with forge ${project.findProperty("forgeVersion")}"
                url = 'https://github.com/Kotori316/LimitMobSpawn'
                packaging = "jar"
            }
        }
    }
    repositories {
        maven {
            name = "AzureRepository"
            url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
            credentials {
                username = project.findProperty("azureUserName") ?: System.getenv("AZURE_USER_NAME") ?: ""
                password = project.findProperty("azureToken") ?: System.getenv("AZURE_TOKEN") ?: "TOKEN"
            }
        }
    }
}

tasks.register("registerVersion", CallVersionFunctionTask.class) {
    functionEndpoint = readVersionFunctionEndpoint(project)
    gameVersion = mcVersion()
    platform = "forge"
    platformVersion = project.findProperty("forgeVersion") as String
    modName = "limitmobspawn"
    changelog = "For ${mcVersion()}"
    homepage = "https://www.curseforge.com/minecraft/mc-mods/limit-mob-spawn"
}

tasks.register("checkReleaseVersion", CallVersionCheckFunctionTask.class) {
    gameVersion = mcVersion()
    platform = "forge"
    modName = "limitmobspawn"
    version = project.version.toString()
    failIfExists = false
}


////////////////
// IntelliJ Project Import
// The Mixin annotation process does not have an obfuscation source when running through the IntelliJ compiler,
// thus we have to prevent it from being activated as part of importing this Gradle project into IntelliJ.
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).configureEach {
            it.options.annotationProcessorPath = files()
        }
    }
}

task copyToDir(type: Copy, dependsOn: "build") {
    def PATH_NAME = "destination"
    from(deobfJar.getArchiveFile())
    into(file(java.util.Optional.ofNullable(System.getenv(PATH_NAME)).orElse(".")))
    onlyIf {
        System.getenv(PATH_NAME) != null &&
                Files.exists(Paths.get(System.getenv(PATH_NAME)))
    }
}

def PUBLISH_DEST_ENV_NAME = "drive_path"
task copyToDrive(type: Copy, dependsOn: "build") {
    from(jar.getArchiveFile(), deobfJar.getArchiveFile(), srcJar.getArchiveFile())
    into(file(java.util.Optional.ofNullable(System.getenv(PUBLISH_DEST_ENV_NAME)).orElse(".")))
    onlyIf {
        System.getenv(PUBLISH_DEST_ENV_NAME) != null &&
                Files.exists(Paths.get(System.getenv(PUBLISH_DEST_ENV_NAME)))
    }
}

def tempDatapack = file("${project.buildDir}/tempDatapack")
task copyPackMeta(type: Copy) {
    from("src/main/resources/example.mcmeta")
    rename("example.mcmeta", "pack.mcmeta")
    into("$tempDatapack")
}

task copyPackData(type: Copy) {
    dependsOn("runData")
    from("src/test/resources/data/lms_example")
    into("$tempDatapack/data/lms_example")
}

task createDataPack(type: Zip, dependsOn: ["copyPackMeta", "copyPackData"]) {
    archiveFileName = "lms-example-${mcVersion()}.zip"
    destinationDirectory = file(java.util.Optional.ofNullable(System.getenv(PUBLISH_DEST_ENV_NAME)).orElse(project.buildDir))
    from(tempDatapack)
    onlyIf {
        System.getenv(PUBLISH_DEST_ENV_NAME) != null &&
                Files.exists(Paths.get(System.getenv(PUBLISH_DEST_ENV_NAME)))
    }
}
