import java.nio.file.Files
import java.nio.file.Paths
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = "https://plugins.gradle.org/m2/" }
        maven { url = 'https://repo.spongepowered.org/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'gradle.plugin.com.matthewprenger', name: 'CurseGradle', version: '1.4.0'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: "com.matthewprenger.cursegradle"

version = '18.0'
group = 'com.kotori316' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'LimitMobSpawn'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') +
        ' JVM: ' + System.getProperty('java.vm.version') +
        '(' + System.getProperty('java.vendor') + ') ' +
        'Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: '1.18'
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property('mixin.env.remapRefMap', 'true')
            property('mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg")
            property("mixin.debug", "true")
            property 'forge.logging.console.level', 'debug'
            forceExit false

            mods {
                "limitmobspawn" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            forceExit false

            mods {
                "limitmobspawn" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'limit_mob_spawn_data_gen', 'true'
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'limitmobspawn', '--all', '--output', file('src/test/resources/'), '--existing', file('src/main/resources/')
            forceExit false

            mods {
                "limitmobspawn" {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        name = "Mixin"
        url = 'https://repo.spongepowered.org/maven'
    }
}


dependencies {
    minecraft(project.forgeVersion)
    // Mixin
    annotationProcessor("org.spongepowered:mixin:0.8.5:processor")
    // Test Dependencies.
    final String JUPITER_VERSION = '5.7.1'
    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: JUPITER_VERSION)
    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: JUPITER_VERSION)
    testRuntimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: JUPITER_VERSION)
    testImplementation(group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.7.0')
}

mixin {
    add sourceSets.main, "mixins.limit-mob-spawn.refmap.json"
}

test {
    useJUnitPlatform()
    int cpus = Runtime.getRuntime().availableProcessors()
    printf("CPU: %d, Memory: %fMB%n", cpus, Runtime.getRuntime().totalMemory() / Math.pow(2, 20))
    // setMaxParallelForks(cpus > 1 ? cpus - 1 : 1)
    systemProperty('limit_mob_spawn_data_gen', 'true')
    testLogging {
        events "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
        // exceptionFormat 'full' // No need because we can get test report html.
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
def jarAttributeMap = [
        "Specification-Title"     : "limitmobspawn",
        "Specification-Vendor"    : "Kotori316",
        "Specification-Version"   : "1", // We are version 1 of ourselves
        "Implementation-Title"    : project.name,
        "Implementation-Version"  : project.version,
        "Implementation-Vendor"   : "Kotori316",
        "Implementation-Timestamp": ZonedDateTime.now().format(DateTimeFormatter.ISO_INSTANT),
        "MixinConfigs"            : "limit-mob-spawn.mixins.json",
        'Automatic-Module-Name'   : 'limitmobspawn',
]
jar {
    manifest {
        attributes(jarAttributeMap)
    }
}
task srcJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier.set('deobf')
    manifest {
        attributes(jarAttributeMap)
    }
}
artifacts {
    archives srcJar, deobfJar
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('signJar')

task signJar(dependsOn: 'reobfJar') {
    boolean executeCondition = project.hasProperty('keyStoreAlias') &&
            project.hasProperty('keyStore') &&
            project.hasProperty('keyStorePass')
    onlyIf { executeCondition }
    doLast {
        //noinspection HttpUrlsUsage
        ant.signjar(
                jar: jar.archiveFile.get(),
                alias: project.hasProperty('keyStoreAlias') ? project.getProperty('keyStoreAlias') : "",
                keystore: project.hasProperty('keyStore') ? project.getProperty("keyStore") : "",
                storepass: project.hasProperty('keyStorePass') ? project.getProperty('keyStorePass') : "",
                sigalg: "SHA1withRSA",
                digestalg: "SHA-256",
                tsaurl: "http://timestamp.digicert.com"
        )
    }
}

curseforge {
    String v = project.forgeVersion
    String minecraftVersion = v.substring(v.lastIndexOf(":") + 1).split("-")[0]
    final File file = file("changelog.md")
    apiKey = project.hasProperty("curseforge_additional-enchanted-miner_key") ? getProperty("curseforge_additional-enchanted-miner_key") : ""
    project {
        id = '449932'
        changelogType = 'markdown'
        changelog = file.exists() ? file.text : "See https://github.com/Kotori316/LimitMobSpawn/commits/master for change log." + System.lineSeparator() * 2 +
                "For Minecraft $minecraftVersion, built with $v"
        releaseType = 'release'
        addGameVersion '1.18'
        addGameVersion 'Forge'
        mainArtifact jar
        addArtifact deobfJar
        addArtifact srcJar
    }
    options {
        curseGradleOptions.debug = false // defaults to false
        javaVersionAutoDetect = false
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "LimitMobSpawn"
            artifact srcJar {
                archiveClassifier.set('sources')
                archiveExtension.set('jar')
            }
            artifact deobfJar {
                archiveClassifier.set('deobf')
                archiveExtension.set('jar')
            }
            artifact jar
            pom {
                String v = project.forgeVersion
                String minecraftVersion = v.substring(v.lastIndexOf(":") + 1).split("-")[0]
                name = archivesBaseName
                description = "LimitMobSpawn for Minecraft $minecraftVersion, build with forge $v"
                url = 'https://github.com/Kotori316/LimitMobSpawn'
                packaging = "jar"
            }
        }
    }
    repositories {
        maven {
            name = "AzureRepository"
            url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
            credentials {
                username = project.findProperty("azureUserName") ?: System.getenv("AZURE_USER_NAME") ?: ""
                password = project.findProperty("azureToken") ?: System.getenv("AZURE_TOKEN") ?: "TOKEN"
            }
        }
    }
}

////////////////
// IntelliJ Project Import
// The Mixin annotation process does not have an obfuscation source when running through the IntelliJ compiler,
// thus we have to prevent it from being activated as part of importing this Gradle project into IntelliJ.
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}

task copyToDir(type: Copy, dependsOn: "build") {
    def PATH_NAME = "destination"
    from(deobfJar.getArchiveFile())
    into(file(java.util.Optional.ofNullable(System.getenv(PATH_NAME)).orElse(".")))
    onlyIf {
        System.getenv(PATH_NAME) != null &&
                Files.exists(Paths.get(System.getenv(PATH_NAME)))
    }
}

task copyToDrive(type: Copy, dependsOn: "build") {
    def PATH_NAME = "destination"
    from(jar.getArchiveFile(), deobfJar.getArchiveFile(), srcJar.getArchiveFile())
    into(file(java.util.Optional.ofNullable(System.getenv(PATH_NAME)).orElse(".")))
    onlyIf {
        System.getenv(PATH_NAME) != null &&
                Files.exists(Paths.get(System.getenv(PATH_NAME)))
    }
}
